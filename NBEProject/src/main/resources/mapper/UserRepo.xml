<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lec.spring.repository.UserRepo">
    <insert id="insert" parameterType="com.lec.spring.domain.User"
    useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO user (id, username, password, regdate, name, phone, birth, email, gender, profileimage, grade, total_price, point)
        VALUE (#{id}, #{username}, #{password}, #{regdate}, #{name}, #{phone}, #{birth}, #{email}, #{gender}, #{profileimage}, #{grade}, #{total_price}, #{point})
    </insert>

    <insert id="insertOAuth" parameterType="com.lec.spring.domain.User" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO user (id, username, password, regdate, name, email, provider, providerId, phone, birth)
        VALUE (#{id}, #{username}, #{password}, #{regdate}, #{name}, #{email}, #{provider}, #{providerId}, #{phone}, #{birth})
    </insert>

    <insert id="saveUser" parameterType="com.lec.spring.dto.UserDto">
        INSERT INTO user (username, password, name, phone, birth, email, gender)
        VALUE (#{username}, #{password}, #{name}, #{phone}, #{birth}, #{email}, #{gender})
    </insert>

    <insert id="saveAddr" parameterType="com.lec.spring.domain.shop.Address">
        INSERT INTO address(user_id, isDefault, street_addr, detail_addr, name)
        VALUES (#{user_id}, #{isDefault}, #{street_addr}, #{detail_addr}, #{name})
    </insert>

    <select id="getLastInsertedUserId" resultType="int">
        SELECT LAST_INSERT_ID();
    </select>

    <delete id="delete" flushCache="true">
        DELETE FROM user
        WHERE id=#{id}
    </delete>

    <update id="update" parameterType="com.lec.spring.domain.User">
        UPDATE user
        SET
            username=#{username},
            password=#{password},
            name=#{name},
            phone=#{phone},
            email=#{email},
            profileimage=#{profileimage},
            grade=#{grade},
            total_price=#{total_price},
            point=#{point}
        WHERE
            id=#{id}

    </update>
    <sql id="SELECT_BASE">
        SELECT id, username, password, regdate, name, phone, birth, email, gender, profileimage, grade, total_price, point, provider, providerId,
               IF(status = 1, true, false) AS status
        FROM user
        WHERE 1=1
    </sql>
    <select id="selectAll" flushCache="true" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
    </select>

    <select id="selectByUsername" flushCache="true" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        AND
        username=#{username}
    </select>

    <select id="selectById" flushCache="true" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        AND
        id=#{id}
    </select>

    <!-- 총 사용자 수 카운트 -->
    <select id="countUsers" resultType="long">
        SELECT COUNT(*) FROM user
    </select>

    <!--  페이지네이션 기능  -->
    <select id="pagination" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!--  유저의 등급 변경 기능  -->
    <update id="updateGrade">
        UPDATE user
        SET grade = #{grade}
        WHERE id = #{userId}
    </update>

    <select id="allUser" flushCache="true" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
            AND
            name LIKE CONCAT('%', #{name}, '%')
    </select>

    <!--  유저의 권한 업데이트(활성, 비활성)  -->
    <update id="updateAuthority">
        UPDATE user_authorities
        SET authority_id = #{authorityId}
        WHERE user_id = #{userId}
    </update>

    <!--  status 변경 기능  -->
    <update id="updateStatus" parameterType="map">
        UPDATE user
        SET status = #{status}
        where id = #{userId}

    </update>

<!--   유저 기본배송지 정보 가져오기 -->
    <select id="getDefaultAddr" resultType="com.lec.spring.domain.shop.Address">
        select *
            from address
        where user_id=#{param1}
        and isDefault=true
    </select>
</mapper>